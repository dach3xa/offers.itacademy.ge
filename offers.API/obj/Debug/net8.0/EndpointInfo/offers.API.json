{
  "openapi": "3.0.1",
  "info": {
    "title": "Offers API",
    "description": "an Api for User Management",
    "contact": {
      "name": "dachi",
      "url": "https://github.com/dachi",
      "email": "kirvalidzedachi@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/v1/Admin/Category": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Creates a new category.",
        "requestBody": {
          "description": "The category data to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDTO"
              },
              "examples": {
                "Electronics": {
                  "value": {"name":"Electronics","description":"Devices like phones, laptops, and TVs."}
                },
                "Books": {
                  "value": {"name":"Books","description":"All kinds of printed and digital reading material."}
                },
                "Clothing": {
                  "value": {"name":"Clothing","description":"Clothing for men, women, and kids."}
                },
                "Furniture": {
                  "value": {"name":"Furniture","description":"Home and office furniture items."}
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed (CategoryCouldNotValidateException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Category already exists (CategoryAlreadyExistsException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during category creation (CategoryCouldNotBeCreatedException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/Admin/users": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Retrieves all registered users.",
        "responses": {
          "200": {
            "description": "Returns a list of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponseModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error if something unexpected goes wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/Admin/companies/{id}/confirm": {
      "patch": {
        "tags": [
          "Admin"
        ],
        "summary": "Confirms (activates) a company account by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the company account to confirm.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Company confirmed successfully"
          },
          "400": {
            "description": "The company is already active (CompanyAlreadyActiveException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Company account not found (AccountNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during confirmation (AccountCouldNotActivateException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/Admin/companies": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Retrieves all registered companies.",
        "responses": {
          "200": {
            "description": "Returns a list of all companies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponseModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error if something unexpected goes wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/Auth/user/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a new user account.",
        "requestBody": {
          "description": "The user registration data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterDTO"
              },
              "examples": {
                "Basic User": {
                  "value": {"firstName":"John","lastName":"Doe","email":"john.doe@example.com","phone":"599889988","password":"P@ssw0rd123"}
                },
                "User with complex password": {
                  "value": {"firstName":"Alice","lastName":"Smith","email":"alice.smith@example.com","phone":"599889988","password":"C0mpl3x!Pass2024"}
                },
                "Test User": {
                  "value": {"firstName":"Test","lastName":"User","email":"test.user@sample.org","phone":"599889988","password":"Test123!"}
                },
                "Minimal Valid User": {
                  "value": {"firstName":"Liam","lastName":"Nguyen","email":"liam.nguyen@mail.com","phone":"599889988","password":"Password123"}
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed (AccountCouldNotValidateException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "An account with the given email already exists (AccountAlreadyExistsException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during registration (AccountCouldNotBeCreatedException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Auth/company/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a new company account.",
        "requestBody": {
          "description": "The company registration data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyRegisterDTO"
              },
              "examples": {
                "Tech Startup": {
                  "value": {"companyName":"InnoTech","email":"contact@innotech.com","phone":"599889988","password":"Innovate@2024","photoURL":"https://images.unsplash.com/photo-1537432376769-00aabc3d3e6b"}
                },
                "Marketing Agency": {
                  "value": {"companyName":"BrandWise","email":"info@brandwise.io","phone":"599889988","password":"Branding123!","photoURL":"https://images.unsplash.com/photo-1581091870622-7e0cdfbb6799"}
                },
                "E-Commerce Platform": {
                  "value": {"companyName":"ShopifyClone","email":"support@shopifyclone.net","phone":"599889988","password":"EcomSecure!9","photoURL":"https://images.unsplash.com/photo-1515169067865-d6f7efb04b03"}
                },
                "Consulting Firm": {
                  "value": {"companyName":"StratEdge","email":"hello@stratedge.org","phone":"599889988","password":"Consult@2023","photoURL":"https://images.unsplash.com/photo-1551836022-d5d88e9218df"}
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed (AccountCouldNotValidateException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "An account with the given email already exists (AccountAlreadyExistsException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticates an account and returns a JWT token.",
        "requestBody": {
          "description": "The login credentials (email and password).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLoginDTO"
              },
              "examples": {
                "Admin Login": {
                  "value": {"email":"randomuser@example.com","password":"dachidachi"}
                },
                "User - John Doe": {
                  "value": {"email":"john.doe@example.com","password":"P@ssw0rd123"}
                },
                "User - Alice Smith": {
                  "value": {"email":"alice.smith@example.com","password":"C0mpl3x!Pass2024"}
                },
                "User - Test User": {
                  "value": {"email":"test.user@sample.org","password":"Test123!"}
                },
                "User - Liam Nguyen": {
                  "value": {"email":"liam.nguyen@mail.com","password":"Password123"}
                },
                "Company - InnoTech": {
                  "value": {"email":"contact@innotech.com","password":"Innovate@2024"}
                },
                "Company - BrandWise": {
                  "value": {"email":"info@brandwise.io","password":"Branding123!"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, returns a JWT token and account info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed (AccountCouldNotValidateException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found or invalid credentials (AccountNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Company/offers": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Creates a new offer for the currently authenticated account.",
        "requestBody": {
          "description": "The offer data to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferDTO"
              },
              "examples": {
                "Bakery Clearance": {
                  "value": {"name":"End-of-Day Croissant Pack","description":"Fresh croissants left over from the day, heavily discounted.","count":5,"price":3.99,"categoryId":1,"archiveAt":"2025-04-05T16:32:29.7973229Z","photoURL":"https://example.com/images/croissants.jpg"}
                },
                "Sushi Leftovers": {
                  "value": {"name":"Evening Sushi Combo","description":"Mixed sushi rolls that didn’t sell today. Safe to eat and delicious.","count":2,"price":7.50,"categoryId":2,"archiveAt":"2025-04-05T15:32:29.8760217Z","photoURL":"https://example.com/images/sushi-combo.jpg"}
                },
                "Fruit Clearance Box": {
                  "value": {"name":"Mixed Fruits (Slightly Ripe)","description":"Box of assorted ripe fruits nearing expiration — great for smoothies.","count":1,"price":4.25,"categoryId":3,"archiveAt":"2025-04-05T17:32:29.8824214Z","photoURL":"https://example.com/images/fruit-box.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Offer successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed (OfferCouldNotValidateException),\r\nor missing/invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Account, Company, or Category not found\r\n(AccountNotFoundException, CompanyNotFoundException, CategoryNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Company is not active (CompanyIsNotActiveException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Retrieves all offers created by the currently authenticated account.",
        "responses": {
          "200": {
            "description": "Returns a list of offers created by the authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferResponseModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found (CompanyNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Company is not active (CompanyIsNotActiveException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/Company/offers/{id}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Retrieves a specific offer by ID that belongs to the authenticated user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the offer to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Access denied for this offer (OfferAccessDeniedException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Offer or company not found\r\n(OfferNotFoundException, CompanyNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Company is not active (CompanyIsNotActiveException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Company"
        ],
        "summary": "Deletes a specific offer belonging to the authenticated user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the offer to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Offer successfully deleted"
          },
          "403": {
            "description": "Access denied for this offer (OfferAccessDeniedException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Offer or company not found\r\n(OfferNotFoundException, CompanyNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Company is not active (CompanyIsNotActiveException),\r\ndeletion failed (OfferCouldNotBeDeletedException),\r\nor transaction could not be refunded (TransactionCouldNotBeRefundedException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/Company": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Retrieves the company associated with the currently authenticated user.",
        "responses": {
          "200": {
            "description": "Returns the company associated with the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Company not found (CompanyNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/Guest/categories": {
      "get": {
        "tags": [
          "Guest"
        ],
        "summary": "Retrieves all available categories.",
        "responses": {
          "200": {
            "description": "Returns a list of all categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryResponseModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Guest/categories/{id}": {
      "get": {
        "tags": [
          "Guest"
        ],
        "summary": "Retrieves a specific category by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the category to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Category not found (CategoryNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Guest/offers": {
      "get": {
        "tags": [
          "Guest"
        ],
        "summary": "Retrieves all available offers.",
        "responses": {
          "200": {
            "description": "Returns a list of all offers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferResponseModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Guest/offers/{id}": {
      "get": {
        "tags": [
          "Guest"
        ],
        "summary": "Retrieves a specific offer by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the offer to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Offer not found (OfferNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/User/offers": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves offers that belong to the specified categories.",
        "parameters": [
          {
            "name": "categoryIds",
            "in": "query",
            "description": "A list of category IDs to filter offers by.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns offers filtered by the given category IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferResponseModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "One or more categories not found (CategoryNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/User/transaction": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a new transaction for the authenticated user based on the selected offer.",
        "requestBody": {
          "description": "The transaction details to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed (TransactionCouldNotValidateException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/User/deposit": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Adds funds to the authenticated user's account.",
        "requestBody": {
          "description": "The deposit amount to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositRequestDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Deposit successful"
          },
          "400": {
            "description": "Validation failed (DepositCouldNotValidateException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account not found (AccountNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Deposit could not be processed (AccountCouldNotDepositException, InvalidOperationException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during deposit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves the currently authenticated user's information.",
        "responses": {
          "200": {
            "description": "Returns the current user's information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User not found (UserNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/User/transactions/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a specific transaction by ID that belongs to the authenticated user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the transaction to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseModel"
                }
              }
            }
          },
          "403": {
            "description": "Access denied for this transaction (TransactionAccessDeniedException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found (TransactionNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Refunds a specific transaction for the authenticated user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the transaction to refund.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Transaction successfully refunded"
          },
          "403": {
            "description": "Access denied for this transaction (TransactionAccessDeniedException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Transaction, offer, or account not found \r\n(TransactionNotFoundException, OfferNotFoundException, AccountNotFoundException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "409": {
            "description": "Refund failed due to business rule conflict\r\n(TransactionCouldNotBeRefundedException, OfferCouldNotIncreaseStockException,\r\nAccountCouldNotDepositException, InvalidOperationException)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/v1/User/transactions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves all transactions associated with the currently authenticated user.",
        "responses": {
          "200": {
            "description": "Returns the list of transactions for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionResponseModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountLoginDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/AccountRole"
          }
        },
        "additionalProperties": false
      },
      "AccountRole": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "logLevel": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "traceId": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "CategoryDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyRegisterDTO": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "photoURL": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/AccountRole"
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DepositRequestDTO": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LogLevel": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "LoginResponseDTO": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/AccountRole"
          }
        },
        "additionalProperties": false
      },
      "OfferDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "archiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "photoURL": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OfferResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "TransactionDTO": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "paid": {
            "type": "number",
            "format": "double"
          },
          "offerId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TransactionResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "paid": {
            "type": "number",
            "format": "double"
          },
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "offerId": {
            "type": "integer",
            "format": "int32"
          },
          "offerName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRegisterDTO": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/AccountRole"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Enter 'Bearer' [space] and then your valid JWT token.\nExample: Bearer abc123...",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}